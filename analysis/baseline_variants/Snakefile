import os
from pathlib import Path
from typing import Dict, Union

import pandas as pd
from snakemake.utils import min_version

min_version("5.14.0")

GB = 1_024
PathLike = Union[str, Path, os.PathLike]


# ======================================================
# Config files
# ======================================================
configfile: "config.yaml"


# only load samples that passed QC and are not excluded
inclusion_expr = "failed_qc == 0 and excluded == 0"
samplesheet = pd.read_csv(config["samplesheet"]).query(inclusion_expr)
containers: Dict[str, PathLike] = config["containers"]
envs: Dict[str, PathLike] = config["envs"]
scripts: Dict[str, PathLike] = config["scripts"]
rule_log_dir = Path("logs/stderr").resolve()
H37RV = config["h37rv"]
data_dir = Path(config["data_dir"]).resolve()
filters = config["filters"]
report_dir = Path("report").resolve()
# plot_dir = report_dir / "plotting"
compass_vcf_dir = Path(config["compass_vcf_dir"]).resolve()
asm_dir = Path(config["asm_dir"]).resolve()
assemblies: Dict[str, str] = config["assemblies"]
nanopore_dir = Path("nanopore").resolve()
concordance_dir = Path("concordance").resolve()
consensus_dir = Path("consensus").resolve()
distance_dir = Path("distance").resolve()
truth_eval_dir = Path("truth_eval").resolve()

# ======================================================
# Global functions and variables
# ======================================================
SITES = samplesheet["site"]
SAMPLES = samplesheet["sample"]
output_files = set()
# output_files.add(concordance_dir / "alt_concordance.html")
FILTER_LOGS = set()
VARIFIER_JSONS = set()
for idx, row in samplesheet.iterrows():
    site = row["site"]
    sample = row["sample"]
    FILTER_LOGS.add(rule_log_dir / f"filter_nanopore_snps/{site}/{sample}.log")

    if row["pacbio"] == 1:
        compass_truth_summary = (
            truth_eval_dir / f"compass/{sample}/varifier/summary_stats.json"
        )
        bcftools_truth_summary = (
            truth_eval_dir / f"bcftools/{sample}/varifier/summary_stats.json"
        )
        VARIFIER_JSONS.add(compass_truth_summary)
        VARIFIER_JSONS.add(bcftools_truth_summary)
        output_files.add(
            truth_eval_dir / f"bcftools/{sample}/happy/{sample}.summary.csv"
        )
        output_files.add(
            truth_eval_dir / f"compass/{sample}/happy/{sample}.summary.csv"
        )

output_files.add(truth_eval_dir / "truth_snp_eval.png")
# output_files.add(distance_dir / "dotplot.html")
# output_files.add(distance_dir / "close_dotplot.html")
output_files.add(distance_dir / "mixed.matrix.csv")
output_files.add(distance_dir / "mixed_self_distance.png")
output_files.add(distance_dir / "mixed.dotplot.png")
output_files.add(distance_dir / "bcftools.dotplot.png")
# for caller in ["bcftools", "compass"]:
#    output_files.add(distance_dir / f"{caller}.heatmap.html")


# ======================================================
# Rules
# ======================================================
localrules:
    all,
    aggregate_consensus,


report: report_dir / "workflow.rst"


rule all:
    input:
        output_files,


rule index_reference:
    input:
        H37RV["genome"],
    output:
        H37RV["genome"] + ".fai",
    log:
        rule_log_dir / "index_reference.log",
    conda:
        envs["aln_tools"]
    shell:
        "samtools faidx --fai-idx {output} {input}"


rule map_nanopore:
    input:
        target=H37RV["genome"],
        query=data_dir / "{site}/nanopore/{sample}/{sample}.subsampled.fastq.gz",
    output:
        sam=nanopore_dir / "mapped/{site}/{sample}.sorted.sam",
    threads: 8
    resources:
        mem_mb=lambda wildcards, attempt: int(8 * GB) * attempt,
    conda:
        envs["aln_tools"]
    params:
        minimap_extras=" ".join(["-a", "-L", "--sam-hit-only", "--secondary=no"]),
        minimap_preset="map-ont",
    log:
        rule_log_dir / "map_nanopore/{site}/{sample}.log",
    shell:
        """
        (minimap2 {params.minimap_extras} \
            -x {params.minimap_preset} \
            -t {threads} \
            {input.target} {input.query} | \
        samtools sort -@ {threads} -o {output.sam}) 2> {log}
        """


rule pileup_nanopore:
    input:
        index=rules.index_reference.output,
        ref=rules.index_reference.input[0],
        alignments=rules.map_nanopore.output.sam,
    output:
        pileup=nanopore_dir / "pileups/{site}/{sample}.pileup.bcf",
    threads: 2
    resources:
        mem_mb=lambda wildcards, attempt: {
            1: int(8 * GB),
            2: int(16 * GB),
            3: int(64 * GB),
        }.get(attempt, 100 * GB),
    params:
        options="-x -O b -I -Q 13 -a 'INFO/SCR,FORMAT/SP,INFO/ADR,INFO/ADF' -h100 -M10000",
    log:
        rule_log_dir / "pileup_nanopore/{site}/{sample}.log",
    container:
        containers["bcftools"]
    shell:
        "bcftools mpileup {params.options} -f {input.ref} -o {output.pileup} --threads {threads} {input.alignments} 2> {log}"


rule call_snps_nanopore:
    input:
        pileup=rules.pileup_nanopore.output.pileup,
    output:
        calls=nanopore_dir / "snp_calls/{site}/{sample}.snps.bcf",
    threads: 2
    resources:
        mem_mb=lambda wildcards, attempt: int(GB) * attempt,
    params:
        caller="-m",
        options="--ploidy 1 -O b -V indels",
    log:
        rule_log_dir / "call_snps_nanopore/{site}/{sample}.log",
    container:
        containers["bcftools"]
    shell:
        """
        bcftools call {params.options} {params.caller} --threads {threads} \
          -o {output.calls} {input.pileup} 2> {log}
        """


def bcftools_filter_opts() -> str:
    opts = [
        ("d", "min_depth"),
        ("D", "max_depth"),
        ("q", "min_qual"),
        ("s", "min_strand_bias"),
        ("b", "min_bqb"),
        ("m", "min_mqb"),
        ("r", "min_rpb"),
        ("V", "min_vdb"),
        ("G", "max_sgb"),
        ("K", "min_frs"),
        ("w", "min_rpbz"),
        ("W", "max_rpbz"),
        ("C", "max_scbz"),
        ("M", "min_mq"),
        ("x", "min_fed"),
    ]
    flags = []
    for op, key in opts:
        if key in filters:
            flags.append(f"-{op} {filters[key]}")
    return " ".join(flags)


rule filter_nanopore_snps:
    input:
        vcf=rules.call_snps_nanopore.output.calls,
    output:
        vcf=nanopore_dir / "filtered_snps/{site}/{sample}.snps.filtered.bcf",
    threads: 1
    resources:
        mem_mb=int(GB),
    params:
        options=" ".join(["-P", "--verbose", "--overwrite", bcftools_filter_opts()]),
        script=scripts["filter"],
    log:
        rule_log_dir / "filter_nanopore_snps/{site}/{sample}.log",
    conda:
        envs["filter"]
    shell:
        """
        python {params.script} {params.options} \
            -i {input.vcf} \
            -o {output.vcf} 2> {log}
        """


def infer_assembly_path(wildcards):
    asm = assemblies[wildcards.sample]
    return f"{asm_dir}/{wildcards.sample}/{asm}/pacbio/decontam.assembly.{asm}.pacbio.fasta"


def infer_assembly_mask_path(wildcards):
    asm = assemblies[wildcards.sample]
    return f"{asm_dir}/{wildcards.sample}/{asm}/pacbio/assessment/{wildcards.sample}.{asm}.accuracy.pacbio.bed"


rule evaluate_compass_snps_with_truth_assembly:
    input:
        truth_asm=infer_assembly_path,
        vcf_ref=H37RV["genome"],
        vcf_to_eval=compass_vcf_dir / "{sample}.compass.vcf.gz",
        ref_mask=H37RV["mask"],
        truth_mask=infer_assembly_mask_path,
    output:
        summary=report(
            truth_eval_dir / "compass/{sample}/varifier/summary_stats.json",
            category="Truth Evaluation",
            subcategory="Raw data",
            caption=report_dir / "varifier_compass.rst",
        ),
        truth_vcf=truth_eval_dir
        / "compass/{sample}/varifier/recall/truth_vcf/04.truth.vcf",
    threads: 4
    resources:
        mem_mb=lambda wildcards, attempt: int(22 * GB) * attempt,
    params:
        options="--force --filter_pass PASS,.",
        flank_length=100,
        outdir=lambda wildcards, output: Path(output.summary).parent,
    log:
        rule_log_dir / "evaluate_compass_with_truth_assembly/{sample}.log",
    container:
        containers["varifier"]
    shell:
        """
        (bcftools view -O v {input.vcf_to_eval} \
        | varifier vcf_eval {params.options} \
            --flank_length {params.flank_length} \
            --ref_mask {input.ref_mask} \
            --truth_mask {input.truth_mask} \
            {input.truth_asm} \
            {input.vcf_ref} \
            - \
            {params.outdir}) 2> {log}
        """


rule evaluate_bcftools_snps_with_truth_assembly:
    input:
        truth_asm=infer_assembly_path,
        vcf_ref=H37RV["genome"],
        vcf_to_eval=(
            nanopore_dir / "filtered_snps/madagascar/{sample}.snps.filtered.bcf"
        ),
        ref_mask=H37RV["mask"],
        truth_mask=infer_assembly_mask_path,
    output:
        summary=report(
            truth_eval_dir / "bcftools/{sample}/varifier/summary_stats.json",
            category="Truth Evaluation",
            subcategory="Raw data",
            caption=report_dir / "varifier_bcftools.rst",
        ),
        truth_vcf=truth_eval_dir
        / "bcftools/{sample}/varifier/recall/truth_vcf/04.truth.vcf",
    threads: 4
    resources:
        mem_mb=lambda wildcards, attempt: int(22 * GB) * attempt,
    params:
        options="--force --filter_pass PASS,.",
        flank_length=100,
        outdir=lambda wildcards, output: Path(output.summary).parent,
    log:
        rule_log_dir / "evaluate_bcftools_with_truth_assembly/{sample}.log",
    container:
        containers["varifier"]
    shell:
        """
        (bcftools view -O v {input.vcf_to_eval} \
        | varifier vcf_eval {params.options} \
            --flank_length {params.flank_length} \
            --ref_mask {input.ref_mask} \
            --truth_mask {input.truth_mask} \
            {input.truth_asm} \
            {input.vcf_ref} \
            - \
            {params.outdir}) 2> {log}
        """


rule plot_truth_snp_concordance:
    input:
        json_files=VARIFIER_JSONS,
    output:
        plot=report(
            truth_eval_dir / "truth_snp_eval.png",
            category="Truth Evaluation",
            caption=report_dir / "truth_snp_eval.rst",
        ),
    threads: 1
    resources:
        mem_mb=int(GB * 0.5),
    conda:
        envs["plot_truth_eval"]
    params:
        recall_key="Recall_edit_dist",
        precision_key="Precision_edit_dist",
        dpi=300,
        figsize=(13, 8),
    script:
        scripts["plot_truth_eval"]


def infer_consensus_input(caller: str, sample: str, site: str) -> str:
    if caller == "compass":
        path = compass_vcf_dir / f"{sample}.compass.vcf.gz"
    elif caller == "bcftools":
        path = nanopore_dir / f"filtered_snps/{site}/{sample}.snps.filtered.bcf"
    else:
        raise NotImplemented(f"Caller {caller} is not known...")
    return str(path)


rule generate_consensus:
    input:
        mask=H37RV["mask"],
        ref_fasta=H37RV["genome"],
        vcf=lambda wildcards: infer_consensus_input(
            wildcards.caller, wildcards.sample, wildcards.site
        ),
    output:
        fasta=consensus_dir / "{caller}/{site}/{sample}.consensus.fa",
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: int(GB) * attempt,
    conda:
        envs["consensus"]
    params:
        options=" ".join(
            ["--verbose", "--ignore all", "--sample-id {sample}", "--het-default none"]
        ),
        script=scripts["consensus"],
    log:
        rule_log_dir / "generate_consensus/{caller}/{site}/{sample}.log",
    shell:
        """
        python {params.script} {params.options} \
            -i {input.vcf} \
            -f {input.ref_fasta} \
            -m {input.mask} \
            -o {output.fasta} 2> {log}
        """


rule aggregate_consensus:
    input:
        fastas=expand(
            consensus_dir / "{{caller}}/{site}/{sample}.consensus.fa",
            zip,
            site=SITES,
            sample=SAMPLES,
        ),
    output:
        fasta=consensus_dir / "{caller}/{caller}.consensus.fa",
    threads: 1
    resources:
        mem_mb=int(GB),
    log:
        rule_log_dir / "aggregate_consensus/{caller}.log",
    shell:
        """
        awk 1 {input.fastas} > {output.fasta} 2> {log}
        """


rule snp_distance:
    input:
        fasta=rules.aggregate_consensus.output.fasta,
    output:
        matrix=report(
            distance_dir / "{caller}.matrix.csv",
            category="Distance",
            subcategory="Data",
            caption=report_dir / "distance.rst",
        ),
    threads: 8
    resources:
        mem_mb=lambda wildcards, attempt: int(2 * GB) * attempt,
    container:
        containers["psdm"]
    log:
        rule_log_dir / "snp_distance/{caller}.log",
    params:
        options="-s -i -P",
    shell:
        "psdm {params.options} -t {threads} -o {output.matrix} {input.fasta} 2> {log}"


rule mixed_snp_distance:
    input:
        a=consensus_dir / "compass/compass.consensus.fa",
        b=consensus_dir / "bcftools/bcftools.consensus.fa",
    output:
        matrix=distance_dir / "mixed.matrix.csv",
    threads: 8
    resources:
        mem_mb=lambda wildcards, attempt: int(4 * GB) * attempt,
    container:
        containers["psdm"]
    params:
        opts="-s -i -P",
    log:
        rule_log_dir / "mixed_snp_distance.log",
    shell:
        "psdm {params.opts} -t {threads} -o {output.matrix} {input.a} {input.b} 2> {log}"


rule mixed_self_distances:
    input:
        matrix=rules.mixed_snp_distance.output.matrix,
    output:
        plot=report(
            distance_dir / "mixed_self_distance.png",
            category="Mixed Tech",
            subcategory="Self",
            caption=report_dir / "self_distance.rst",
        ),
    threads: 1
    resources:
        mem_mb=int(GB),
    conda:
        envs["mixed_self_distance"]
    log:
        rule_log_dir / "mixed_self_distance.log",
    script:
        scripts["mixed_self_distance"]


rule mixed_dotplot:
    input:
        x_matrix=distance_dir / "compass.matrix.csv",
        y_matrix=rules.mixed_snp_distance.output.matrix,
    output:
        plot=report(
            distance_dir / "mixed.dotplot.png",
            category="Mixed Tech",
            subcategory="Dotplot",
            caption=report_dir / "mixed_dotplot.rst",
        ),
    threads: 1
    resources:
        mem_mb=int(GB),
    conda:
        envs["bcftools_dotplot"]
    log:
        rule_log_dir / "mixed_dotplot.log",
    params:
        mixed_dist=True,
        figsize=(13, 13),
        dpi=300,
        xlabel="COMPASS SNP distance",
        ylabel="mixed tech. SNP distance",
        scatter_kws=dict(alpha=0.75, linewidth=0.25),
        inset_bounds=[0.05, 0.52, 0.5, 0.48],
        inset_threshold=20,
        legend_loc="lower right",
        inset_legend_loc="lower right",
        plot_linear_model=False,
        lxthreshold=5,
        xthreshold=12,
        lythreshold=5,
        ythreshold=12,
        inset_ticklabels=[0, 2, 5, 12],
    script:
        scripts["bcftools_dotplot"]


rule bcftools_dotplot:
    input:
        x_matrix=distance_dir / "compass.matrix.csv",
        y_matrix=distance_dir / "bcftools.matrix.csv",
    output:
        plot=report(
            distance_dir / "bcftools.dotplot.png",
            category="Distance",
            subcategory="Plot",
            caption=report_dir / "bcftools_dotplot.rst",
        ),
    threads: 1
    resources:
        mem_mb=int(GB),
    conda:
        envs["bcftools_dotplot"]
    log:
        rule_log_dir / "bcftools_dotplot.log",
    params:
        mixed_dist=False,
        figsize=(13, 13),
        dpi=300,
        xlabel="COMPASS SNP distance",
        ylabel="bcftools SNP distance",
        scatter_kws=dict(alpha=0.75, linewidth=0.25),
        inset_bounds=[0.05, 0.52, 0.5, 0.48],
        inset_threshold=20,
        legend_loc="lower right",
        inset_legend_loc="lower right",
        plot_linear_model=False,
        lxthreshold=5,
        xthreshold=12,
        lythreshold=6,
        ythreshold=12,
        inset_ticklabels=[0, 2, 5, 6, 12],
    script:
        scripts["bcftools_dotplot"]


include: "rules/happy.smk"
